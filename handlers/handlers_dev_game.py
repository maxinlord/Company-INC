import abc
import time
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, ChatActions
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import types
from aiogram.utils.mixins import T
from dispatcher import dp
from bot import BotDB
from dispatcher import bot 
import asyncio
from keyboards.default import keyboard_default
from keyboards.inline import keyboard_inline
from aiogram.types import CallbackQuery


class game_beginning(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()


class company_dev_software(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()


class exchange_rub_usd(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()


class exchange_usd_rub(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()


class exchange_usd_btc(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()


class exchange_btc_usd(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()


def referrer_linc(id_user, bot_name='company_inc_game_bot'):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ —é–∑–µ—Ä–∞'''
    return f'http://t.me/{bot_name}?start={id_user}'


def last_tap(button, call=False): 
    '''–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è —é–∑–µ—Ä–∞ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ'''
    def actual_dec(func):
        if not call:
            async def wrapper(message: types.Message):

                date = time.strftime('%X') + time.strftime(' %m/%d/%Y')
                BotDB.updateT(key='last_tap', where='id_user', meaning=message.from_user.id, text=date)
                BotDB.add(table='click_button', key='amount_click', where='button', meaning=button, num=1)
                return await func(message)

            
        else:
            async def wrapper(call: CallbackQuery):

                date = time.strftime('%X') + time.strftime(' %m/%d/%Y')
                BotDB.updateT(key='last_tap', where='id_user', meaning=call.from_user.id, text=date)
                BotDB.add(table='click_button', key='amount_click', where='button', meaning=button, num=1)
                return await func(call)

        return wrapper

    return actual_dec


# def last_tap_callback(button): 
#     '''–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è —é–∑–µ—Ä–∞ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ'''
#     def actual_dec_callback(func):

#         async def wrapper_callback(call: CallbackQuery):

#             date = time.strftime('%X') + time.strftime(' %m/%d/%Y')
#             BotDB.updateT(key='last_tap', where='id_user', meaning=call.from_user.id, text=date)
#             BotDB.add(table='click_button', key='amount_click', where='button', meaning=button, num=1)
#             return await func(call)

#         return wrapper_callback

#     return actual_dec_callback   


'''–ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–æ–≥–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–∫–∞ –Ω–µ —É–¥–æ–ª—è—Ç—å!'''
# def name_decorator(func):
#     async def wrapper(message: types.Message):
#         if message.from_user.id != 474701274:
#             arr = 44
#         else:
#             arr = 55
#         return await func(arr,message)
#     return wrapper




@dp.message_handler(Command("start"))
@last_tap('start')
async def start_menu(message: Message):
    id_user = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    if(not BotDB.user_exists(message.from_user.id)):
        BotDB.add_user(message.from_user.id)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        try:
            id_referrer = int(message.text.split()[1])
            if id_referrer == message.from_user.id:
                await message.answer('<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–µ–±–µ</i>')
            else:
                BotDB.updateN(key='referal', where='id_user', meaning=id_user, num=id_referrer)
        except Exception as e:
            pass
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ last_name
        if message.from_user.last_name is None:
            name = message.from_user.first_name
        else:
            name = message.from_user.first_name + ' ' + message.from_user.last_name
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ username
        if message.from_user.username is None:
            username = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        else:
            username = '@' + message.from_user.username
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        BotDB.updateT(key='username', where='id_user', meaning=id_user, text=username)  # –∑–∞–ø–∏—Å—å username
        BotDB.updateT(key='name', where='id_user', meaning=id_user, text=name.strip())  # –∑–∞–ø–∏—Å—å –∏–º–µ–Ω–∏
        await message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º(–Ω–∏–∫–Ω–µ–π–º)</i>', reply_markup=ReplyKeyboardRemove())
        await game_beginning.Q1.set()
    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=keyboard_default.main_page)


@dp.message_handler(state=game_beginning.Q1)
async def q1(message: Message):
    if len(message.text) > 15:
        await message.answer('<b>–î–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 15‚ùóÔ∏è</b>')
        await message.answer('<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i>')
    else:
        # –∑–∞–ø–∏—Å—å nickname(–ø—Å–µ–≤–¥–æ–Ω–∏–º–∞)
        BotDB.updateT(key='nickname', where='id_user', meaning=message.from_user.id, text=message.text)
        await message.answer('<i>–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</i>', reply_markup=keyboard_default.fields)
        await game_beginning.Q2.set()
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        await asyncio.sleep(1)


@dp.message_handler(state=game_beginning.Q2)
async def q2(message: Message):
    if message.text == "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–∞–≤–∞—Ä–æ–≤üç¶":
        await message.answer('<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</i>', reply_markup=keyboard_default.types_product)
        await game_beginning.Q3.set()
    elif message.text == "–û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥üíáüèª‚Äç‚ôÇÔ∏èÔ∏èÔ∏è":
        await message.answer('<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</i>', reply_markup=keyboard_default.types_services)
        await game_beginning.Q3.set()
    elif message.text == "–ù–µ—Ñ—Ç—è–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—åüõ¢":
        await message.answer('<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</i>', reply_markup=keyboard_default.types_blackgold)
        await game_beginning.Q3.set()
    elif message.text == "ITüïπ":
        await message.answer('<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</i>', reply_markup=keyboard_default.types_it)
        await game_beginning.Q3.set()
    else:
        await message.answer('<i>–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</i>')


@dp.message_handler(state=game_beginning.Q3)
async def q3(message: Message):
    if message.text == "–ù–∞–∑–∞–¥‚§¥Ô∏è":
        await message.answer('<i>–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</i>', reply_markup=keyboard_default.fields)
        await game_beginning.Q2.set()
    else:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º—ã
        if message.text in list(map(lambda x: x.strip(),BotDB.get(key='text_box1',where='name',meaning='types_field',table='value_main').split(','))):
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ë–î
            BotDB.updateT(key='type_of_activity', where='id_user', meaning=message.from_user.id, text=message.text)
            await message.answer('<i>–î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</i>', reply_markup=ReplyKeyboardRemove())
            await game_beginning.Q4.set()
        else:
            await message.answer('<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</i>')


@dp.message_handler(state=game_beginning.Q4)
async def q4(message: Message, state: FSMContext):
    if len(message.text) > 15:
        await message.answer('<b>–î–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 15‚ùóÔ∏è</b>')
        await message.answer('<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i>')
    else:
        type_of_activity = BotDB.get(key='type_of_activity', where='id_user', meaning=message.from_user.id)
        # BotDB.updateT(table=type_of_activity, key='name_company', where='id_founder', meaning=message.from_user.id, text=message.text)
        date = time.strftime('%X') + time.strftime(' %m/%d/%Y')
        BotDB.updateT(key='date_reg', where='id_user', meaning=message.from_user.id, text=date)  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —é–∑–µ—Ä–∞
        await message.answer('<i>–ê —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–µ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –Ω–∞–∂–∞–≤ —Å—é–¥–∞ üëâüèª /manual</i>',
                             reply_markup=ReplyKeyboardRemove())
        await message.answer('–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ', reply_markup=keyboard_default.main_page)
        await state.finish()


@dp.message_handler(Command("manual"))
@last_tap('manual')
async def game_manual(message: Message):
    await message.answer('–°—Ç–∞—Ç—å—è')


# @dp.message_handler(Command("del"))
# async def del_table(message: Message):
#     delete_table_user('hh')
#     print('–í—ã–ø–æ–ª–Ω–∏–ª')


# @dp.message_handler(Command("crt"))
# async def crt_table(message: Message):
#     create_table_graf_rate()
#     print('–í—ã–ø–æ–ª–Ω–∏–ª')


# @dp.message_handler(content_types=['photo'])
# async def crt_table(message: Message):
#     await message.answer(f"{message}")


# @dp.message_handler(Command('test'))
# async def crt_table(message: Message):
#     await message.answer(f'{message}')



def shell_money(quantity_money, currency='usd'):
    '''–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è '''
    lnum = '{0:,.2f}'.format(float(quantity_money))
    lnum = int(lnum.split('.')[1])
    if lnum == 0:
        return '<b>{0:,}</b>'.format(quantity_money)
    else:
        if currency == 'usd':
            return '<b>{0:,.2f}</b>'.format(float(quantity_money))
        elif currency == 'btc':
            return '<b>{0:,.5f}</b>'.format(float(quantity_money))


def currency_calculation(money, what_calculate='rub_in_usd', currency='rate_usd'):
    '''–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã'''
    rate = BotDB.get(table='value_main', key='float_box', where='name', meaning=currency)
    if what_calculate == 'rub_in_usd':
        result = round(money / rate, 2)
    elif what_calculate == 'usd_in_btc':
        result = round(money / rate, 5)
    elif what_calculate == 'usd_in_rub':
        result = int(money * rate)
    elif what_calculate == 'btc_in_usd':
        result = round(money * rate,2)
    else:
        print('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!')
    return result


@dp.message_handler(Text(equals="–°—á–µ—Çüí≥Ô∏è"))
@last_tap('account')
async def account_user(message: Message):
    pic = BotDB.get(table='value_main', key='text_box1', where='name', meaning='account_pic')
    rub = BotDB.get(key='rub', where='id_user', meaning=message.from_user.id)
    usd = BotDB.get(key='usd', where='id_user', meaning=message.from_user.id)
    btc = BotDB.get(key='btc', where='id_user', meaning=message.from_user.id)
    text = f'- RUB = {shell_money(rub)}—Ä—É–±.\n- USD = {shell_money(usd)}$\n- BTC = {shell_money(btc, "btc")}BTC'
    await bot.send_photo(message.from_user.id, pic, text)


def check_graf_rate(dimension):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –∫—É—Ä—Å–æ–≤ usd and btc –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—É—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, —Ç–æ–≥–¥–∞ —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª—è–µ—Ç—Å—è'''
    result_usd, result_btc = BotDB.get_all('*','graf_rate_usd'), BotDB.get_all('*','graf_rate_usd')
    if len(result_usd) > dimension:
        BotDB.delete('id',result_usd[0][0],'graf_rate_usd')
    elif len(result_btc) > dimension:
        BotDB.delete('id',result_usd[0][0],'graf_rate_btc')
    else:
        pass



def exchange_balans(count_money, type_currency='rate_usd'):
    abs_money = abs(count_money)
    rate_currency = BotDB.get(table='value_main', key='float_box', where='name', meaning=type_currency)
    ratio = BotDB.get(table='value_main', key='int_box1', where='name', meaning=f'ratio_exchange')  # –∫–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±–º–µ–Ω–∞
    result = list(map(lambda x: x[0],BotDB.get_all(type_currency.split('_')[1]))) #–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –¥–µ–Ω—å–≥–∏ —É–∫–∞–∑–æ–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
    type_percent = 'perc_' + type_currency.split('_')[1] 
    type_graf_rate = 'graf_rate_' + type_currency.split('_')[1] 
    if count_money > 0:
        percent = round((abs_money/(sum(result)+abs_money))/ratio, 2) #—Ç–µ–ø–µ—Ä—å –¥–µ–ª–∏–º –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ –∫–æ—Ç–æ—Ä–æ–µ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –æ–±—â–µ–µ –∏—Ö –∫–æ–ª-–≤–æ –∏–º–µ—é—â–µ–µ—Å—è —É –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏ –¥–µ–ª–∏–º –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±–º–µ–Ω–∞
        currency = rate_currency + percent * rate_currency
        percent_to_text = f"{percent * 100}"
    else:
        percent = round((abs_money/sum(result))/ratio, 2)
        currency = rate_currency - percent * rate_currency
        percent_to_text = f"-{percent * 100}"
    BotDB.updateN(table='value_main', key='float_box', where='name', meaning=type_currency, num=round(currency, 2))
    date = time.strftime('%X') + time.strftime(' %m/%d/%Y')
    rate_now_text = type_currency + '_now'
    BotDB.cur.execute(f'INSERT INTO "{type_graf_rate}" (time_update, {type_currency}, {type_percent}, {rate_now_text}) VALUES (?,?,?,?)',(date, rate_currency, percent_to_text, round(currency,2)))
    BotDB.conn.commit()
    check_graf_rate(15)



@dp.message_handler(Text(equals="–ë–∞–Ω–∫üè¶"))
@last_tap('bank')
async def bank(message: Message):
    pic = BotDB.get(table='value_main', key='text_box1', where='name', meaning='bank_pic')
    usd = BotDB.get(key='usd', where='id_user', meaning=message.from_user.id)
    btc = BotDB.get(key='btc', where='id_user', meaning=message.from_user.id)
    rub = BotDB.get(key='rub', where='id_user', meaning=message.from_user.id)
    rate_usd = BotDB.get(table='value_main', key='float_box', where='name', meaning='rate_usd')
    rate_btc = BotDB.get(table='value_main', key='float_box', where='name', meaning='rate_btc')
    time_ = time.strftime('%X').split()[0]
    sec = 60 - int(time_.split(':')[2])
    text = f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É\n' \
           f'- RUB = {shell_money(rub)} —Ä—É–±.\n' \
           f'- USD = {shell_money(usd)} $\n' \
           f'- BTC = {shell_money(btc, "btc")} BTC\n\n' \
           f'–ö—É—Ä—Å –≤–∞–ª—é—Çüí±\n' \
           f'- 1$ = {shell_money(rate_usd)} —Ä—É–±.\n' \
           f'- 1BTC = {shell_money(rate_btc)} $\n\n' \
           f'–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è \n–∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {sec} —Å–µ–∫.'
    await bot.send_photo(message.from_user.id, pic, text, reply_markup=keyboard_inline.update_and_convert)


@dp.callback_query_handler(Text(equals='update'))
@last_tap('update',True)
async def up_and_convert(call: CallbackQuery):
    await call.answer(cache_time=1)
    usd = BotDB.get(key='usd', where='id_user', meaning=call.from_user.id)
    btc = BotDB.get(key='btc', where='id_user', meaning=call.from_user.id)
    rub = BotDB.get(key='rub', where='id_user', meaning=call.from_user.id)
    rate_usd = BotDB.get(table='value_main', key='float_box', where='name', meaning='rate_usd')
    rate_btc = BotDB.get(table='value_main', key='float_box', where='name', meaning='rate_btc')
    time_ = time.strftime('%X').split()[0]
    sec = 60 - int(time_.split(':')[2])
    text = f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É\n' \
           f'- RUB = {shell_money(rub)} —Ä—É–±.\n' \
           f'- USD = {shell_money(usd)} $\n' \
           f'- BTC = {shell_money(btc, "btc")} BTC\n\n' \
           f'–ö—É—Ä—Å –≤–∞–ª—é—Çüí±\n' \
           f'- 1$ = {shell_money(rate_usd)} —Ä—É–±.\n' \
           f'- 1BTC = {shell_money(rate_btc)} $\n\n' \
           f'–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è \n–∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {sec} —Å–µ–∫.'
    try:
        await bot.edit_message_caption(message_id=call.message.message_id, chat_id=call.from_user.id, caption=text,
                                       reply_markup=keyboard_inline.update_and_convert)
    except Exception as e:
        pass


@dp.callback_query_handler(Text(equals='ru'))
@last_tap('rub_usd',call=True)
async def rub_usd(call: CallbackQuery):
    await call.answer(cache_time=1)
    await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.from_user.id, '<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å</i>',
                           reply_markup=keyboard_default.exchange)
    await exchange_rub_usd.Q1.set()
    BotDB.update_user_state(call.from_user.id, True)


@dp.message_handler(state=exchange_rub_usd.Q1)
async def q1(message: Message, state: FSMContext):
    rub = BotDB.get(key='rub', where='id_user', meaning=message.from_user.id)
    percent_bank = BotDB.get(table='value_main', key='float_box', where='name', meaning='percent_bank')
    try:
        num = round(float(message.text), 2)
        if num <= rub:
            
            usd = currency_calculation(num)
            exchange_balans(round(usd,2))
            usd_with_fee = usd - usd * percent_bank
            BotDB.add(key='usd', where='id_user', meaning=message.from_user.id, num=round(usd_with_fee, 2))
            BotDB.add(key='rub', where='id_user', meaning=message.from_user.id, num=-num)
            await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                 f'- {int(percent_bank * 100)}%({shell_money(usd * percent_bank)}$) - –ø–æ–ª—É—á–∏–ª –±–∞–Ω–∫ –∑–∞ '
                                 f'—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                 f'–ò—Ç–æ–≥–æ: {shell_money(usd_with_fee)}$', reply_markup=keyboard_default.main_page)
            await state.finish()
            BotDB.update_user_state(message.from_user.id)
        else:
            await message.answer('<i>–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–µ–Ω–µ–≥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                 reply_markup=keyboard_default.exchange)
    except Exception as e:
        if message.text == '–û–±–º–µ–Ω—è—Ç—å –≤—Å—é –∏–º–µ—é—â—é—é—Å—è –≤–∞–ª—é—Ç—É‚è©':
            if rub != 0:
                usd = currency_calculation(rub)
                exchange_balans(round(usd, 2))
                usd_with_fee = usd - usd * percent_bank
                BotDB.add(key='usd', where='id_user', meaning=message.from_user.id, num=round(usd_with_fee, 2))
                BotDB.updateN(key='rub', where='id_user', meaning=message.from_user.id, num=0)
                await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                     f'- {int(percent_bank * 100)}%({shell_money(usd * percent_bank)}$) - –ø–æ–ª—É—á–∏–ª '
                                     f'–±–∞–Ω–∫ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                     f'–ò—Ç–æ–≥–æ: {shell_money(usd_with_fee)}$', reply_markup=keyboard_default.main_page)
                
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
            else:
                await message.answer('<i>–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥, –∑–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ</i>',
                                     reply_markup=keyboard_default.main_page)
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
        elif message.text == "–û—Ç–º–µ–Ω–∞‚ùåÔ∏è":
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard_default.main_page)
            await state.finish()
            BotDB.update_user_state(message.from_user.id)
        else:
            await message.answer('<i>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                 reply_markup=keyboard_default.exchange)


@dp.callback_query_handler(Text(equals='ur'))
@last_tap('usd_rub',call=True)
async def usd_rub(call: CallbackQuery):
    await call.answer(cache_time=1)
    await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.from_user.id, '<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–ª–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å</i>',
                           reply_markup=keyboard_default.exchange)
    await exchange_usd_rub.Q1.set()
    BotDB.update_user_state(call.from_user.id,True)


@dp.message_handler(state=exchange_usd_rub.Q1)
async def q1(message: Message, state: FSMContext):
    usd = BotDB.get(key='usd', where='id_user', meaning=message.from_user.id)
    percent_bank = BotDB.get(table='value_main', key='float_box', where='name', meaning='percent_bank')
    try:
        num = round(float(message.text), 2)
        if num <= usd:
            
            
            rub = currency_calculation(num, what_calculate='usd_in_rub')
            exchange_balans(-num)  # usd-
            rub_with_fee = rub - rub * percent_bank
            BotDB.add(key='rub', where='id_user', meaning=message.from_user.id, num=round(rub_with_fee, 2))
            BotDB.add(key='usd', where='id_user', meaning=message.from_user.id, num=-num)
            await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                 f'- {int(percent_bank * 100)}%({shell_money(rub * percent_bank)}—Ä—É–±.) - –ø–æ–ª—É—á–∏–ª –±–∞–Ω–∫ –∑–∞ '
                                 f'—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                 f'–ò—Ç–æ–≥–æ: {shell_money(rub_with_fee)}—Ä—É–±.', reply_markup=keyboard_default.main_page)
            
            await state.finish()
            BotDB.update_user_state(message.from_user.id)
        else:
            await message.answer('<i>–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–µ–Ω–µ–≥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                 reply_markup=keyboard_default.exchange)
    except Exception as e:
        if message.text == '–û–±–º–µ–Ω—è—Ç—å –≤—Å—é –∏–º–µ—é—â—é—é—Å—è –≤–∞–ª—é—Ç—É‚è©':
            if usd != 0:
                
                rub = currency_calculation(usd, what_calculate='usd_in_rub')
                exchange_balans(-usd)  # usd-
                rub_with_fee = rub - rub * percent_bank
                BotDB.add(key='rub', where='id_user', meaning=message.from_user.id, num=round(rub_with_fee, 2))
                BotDB.updateN(key='usd', where='id_user', meaning=message.from_user.id, num=0)
                await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                     f'- {int(percent_bank * 100)}%({shell_money(rub * percent_bank)}—Ä—É–±.) - –ø–æ–ª—É—á–∏–ª '
                                     f'–±–∞–Ω–∫ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                     f'–ò—Ç–æ–≥–æ: {shell_money(rub_with_fee)}—Ä—É–±.', reply_markup=keyboard_default.main_page)
                
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
            else:
                await message.answer('<i>–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥, –∑–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ</i>',
                                     reply_markup=keyboard_default.main_page)
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
        elif message.text == "–û—Ç–º–µ–Ω–∞‚ùåÔ∏è":
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard_default.main_page)
            await state.finish()
            BotDB.update_user_state(message.from_user.id)
        else:
            await message.answer('<i>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                 reply_markup=keyboard_default.exchange)


@dp.callback_query_handler(Text(equals='ub'))
@last_tap('usd_btc',call=True)
async def usd_btc(call: CallbackQuery):
    usd = BotDB.get(key='usd', where='id_user', meaning=call.from_user.id)
    rate_btc = BotDB.get(table='value_main', key='float_box', where='name', meaning='rate_btc')
    if usd > rate_btc / 10:
        await call.answer(cache_time=1)
        await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
        await bot.send_message(call.from_user.id, '<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å</i>',
                               reply_markup=keyboard_default.exchange)
        await exchange_usd_btc.Q1.set()
        BotDB.update_user_state(call.from_user.id,True)
    else:
        await bot.send_message(call.from_user.id, '<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ '
                                                  '–ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å –≤–∞–º 1/10 —á–∞—Å—Ç—å –±–∏—Ç–∫–æ–∏–Ω–∞, '
                                                  ' —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</i>')


@dp.message_handler(state=exchange_usd_btc.Q1)
async def q1(message: Message, state: FSMContext):
    percent_bank = BotDB.get(table='value_main', key='float_box', where='name', meaning='percent_bank')
    usd = BotDB.get(key='usd', where='id_user', meaning=message.from_user.id)
    rate_btc = BotDB.get(table='value_main', key='float_box', where='name', meaning='rate_btc')
    try:
        num = round(float(message.text), 2)
        if num > rate_btc / 10:
            if num <= usd:
                btc = currency_calculation(num, what_calculate='usd_in_btc', currency='rate_btc')
                exchange_balans(-num)  # usd-
                exchange_balans(btc ,'rate_btc')  # btc+
                btc_with_fee = btc - btc * percent_bank
                BotDB.add(key='btc', where='id_user', meaning=message.from_user.id, num=round(btc_with_fee, 5))
                BotDB.add(key='usd', where='id_user', meaning=message.from_user.id, num=-num)
                await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                     f'- {int(percent_bank * 100)}%({shell_money(btc * percent_bank, "btc")}BTC) - '
                                     f'–ø–æ–ª—É—á–∏–ª –±–∞–Ω–∫ –∑–∞ '
                                     f'—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                     f'–ò—Ç–æ–≥–æ: {shell_money(btc_with_fee, "btc")}BTC', reply_markup=keyboard_default.main_page)
                
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
            else:
                await message.answer('<i>–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–µ–Ω–µ–≥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                     reply_markup=keyboard_default.exchange)
        else:
            await message.answer('<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–ª–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å '
                                 '–≤–∞–º 1/10 —á–∞—Å—Ç—å –±–∏—Ç–∫–æ–∏–Ω–∞,'
                                 ' —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</i>')
            await message.answer('<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>')
    except Exception as e:
        if message.text == '–û–±–º–µ–Ω—è—Ç—å –≤—Å—é –∏–º–µ—é—â—é—é—Å—è –≤–∞–ª—é—Ç—É‚è©':
            if usd > rate_btc / 10:
                btc = currency_calculation(usd, what_calculate='usd_in_btc', currency='rate_btc')
                exchange_balans(-usd)  # usd-
                exchange_balans(btc ,'rate_btc')  # btc+
                btc_with_fee = btc - btc * percent_bank
                BotDB.add(key='btc', where='id_user', meaning=message.from_user.id, num=round(btc_with_fee, 5))
                BotDB.updateN(key='usd', where='id_user', meaning=message.from_user.id, num=0)
                await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                     f'- {int(percent_bank * 100)}%({shell_money(btc * percent_bank, "btc")}'
                                     f'BTC) - –ø–æ–ª—É—á–∏–ª '
                                     f'–±–∞–Ω–∫ –∑–∞ '
                                     f'—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                     f'–ò—Ç–æ–≥–æ: {shell_money(btc_with_fee, "btc")}BTC', reply_markup=keyboard_default.main_page)
                
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
            else:
                await message.answer('<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–ª–∞—Ä–æ–≤, –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å '
                                    '–≤–∞–º 1/10 —á–∞—Å—Ç—å –±–∏—Ç–∫–æ–∏–Ω–∞,'
                                    ' —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</i>')
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
        elif message.text == "–û—Ç–º–µ–Ω–∞‚ùåÔ∏è":
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard_default.main_page)
            await state.finish()
            BotDB.update_user_state(message.from_user.id)
        else:
            await message.answer('<i>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                 reply_markup=keyboard_default.exchange)


@dp.callback_query_handler(Text(equals='bu'))
@last_tap('btc_usd',call=True)
async def btc_usd(call: CallbackQuery):
    await call.answer(cache_time=1)
    await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.from_user.id, '<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å</i>',
                           reply_markup=keyboard_default.exchange)
    await exchange_btc_usd.Q1.set()
    BotDB.update_user_state(call.from_user.id,True)


@dp.message_handler(state=exchange_btc_usd.Q1)
async def q1(message: Message, state: FSMContext):
    percent_bank = BotDB.get(table='value_main', key='float_box', where='name', meaning='percent_bank')
    btc = BotDB.get(key='btc', where='id_user', meaning=message.from_user.id)
    try:
        num = round(float(message.text), 5)
        if num <= btc:
            usd = currency_calculation(num, what_calculate='btc_in_usd', currency='rate_btc')
            exchange_balans(usd)  # usd+
            exchange_balans(-num ,'rate_btc')  # btc-
            usd_with_fee = usd - usd * percent_bank
            BotDB.add(key='usd', where='id_user', meaning=message.from_user.id, num=round(usd_with_fee, 2))
            BotDB.add(key='btc', where='id_user', meaning=message.from_user.id, num=-num)
            await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                 f'- {int(percent_bank * 100)}%({shell_money(usd * percent_bank)}$) - –ø–æ–ª—É—á–∏–ª –±–∞–Ω–∫ –∑–∞ '
                                 f'—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                 f'–ò—Ç–æ–≥–æ: {shell_money(usd_with_fee)}$', reply_markup=keyboard_default.main_page)
            
            await state.finish()
            BotDB.update_user_state(message.from_user.id)
        else:
            await message.answer('<i>–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–µ–Ω–µ–≥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                 reply_markup=keyboard_default.exchange)
    except Exception as e:
        if message.text == '–û–±–º–µ–Ω—è—Ç—å –≤—Å—é –∏–º–µ—é—â—é—é—Å—è –≤–∞–ª—é—Ç—É‚è©':
            if btc > 0:
                usd = currency_calculation(btc, what_calculate='btc_in_usd', currency='rate_btc')
                exchange_balans(usd)  # usd+
                exchange_balans(-btc ,'rate_btc')  # btc-
                usd_with_fee = usd - usd * percent_bank
                BotDB.add(key='usd', where='id_user', meaning=message.from_user.id, num=round(usd_with_fee, 2))
                BotDB.updateN(key='btc', where='id_user', meaning=message.from_user.id, num=0)
                await message.answer(f'–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–∞—Å—å!\n\n'
                                     f'- {int(percent_bank * 100)}%({shell_money(usd * percent_bank)}$) - –ø–æ–ª—É—á–∏–ª '
                                     f'–±–∞–Ω–∫ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n '
                                     f'–ò—Ç–æ–≥–æ: {shell_money(usd_with_fee)}$', reply_markup=keyboard_default.main_page)
                
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
            else:
                await message.answer('<i>–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∑–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ</i>',
                                     reply_markup=keyboard_default.main_page)
                await state.finish()
                BotDB.update_user_state(message.from_user.id)
        elif message.text == "–û—Ç–º–µ–Ω–∞‚ùåÔ∏è":
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard_default.main_page)
            await state.finish()
            BotDB.update_user_state(message.from_user.id)
        else:
            await message.answer('<i>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</i>',
                                 reply_markup=keyboard_default.exchange)


@dp.message_handler(Text(equals="–†–µ—Ñ–µ—Ä–∞–ª—ãüóø"))
@last_tap('referal')
async def referal_invite(message: Message):
    five = BotDB.get(table='value_main', key='int_box1', where='name', meaning='five')
    seven = BotDB.get(table='value_main', key='int_box1', where='name', meaning='seven')
    award_referrer = BotDB.get(table='value_main', key='int_box1', where='name',
                      meaning='award_referrer')  # –Ω–∞–≥—Ä–∞–¥–∞ —Ç–æ–≥–æ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª(—Ä–µ—Ñ–µ—Ä—Ä–µ—Ä)
    award_referral = BotDB.get(table='value_main', key='int_box1', where='name',
                   meaning='award_referral')  # –Ω–∞–≥—Ä–∞–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–µ—Ä–µ—à–µ–¥—à–µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ
    await message.answer(f'–†–µ—Ñ–µ—Ä–∞–ª - —ç—Ç–æ –≤–∞—à –¥—Ä—É–≥ –∏–ª–∏ –∑–Ω–∞–∫–æ–º—ã–π, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—à—ë–ª –ø–æ '
                         f'–≤–∞—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —á–µ–≥–æ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{five}-{seven}%*</b> —Å '
                         f'–µ–≥–æ –¥–æ—Ö–æ–¥–∞.\n\n'
                         f'–ß—Ç–æ–±—ã —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏–Ω–æ—Å–∏–ª –≤–∞–º –¥–æ—Ö–æ–¥, –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ <b>–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é*</b>, '
                         f'–ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∫–æ—Ç–æ—Ä–æ–π '
                         f'–∫–∞–∂–¥–∞—è –∏–∑ —Å—Ç–æ—Ä–æ–Ω –ø–æ–ª—É—á–∏—Ç –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ\n\n'
                         f'- –í—ã ‚û°Ô∏è <b>{shell_money(award_referrer)}</b>$\n'
                         f'- –†–µ—Ñ–µ—Ä–∞–ª ‚û°Ô∏è <b>{shell_money(award_referral)}</b>$\n\n'
                         f'–í–æ—Ç –≤–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ \n{referrer_linc(message.from_user.id)}\n'
                         f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∏–≥—Ä—É!\n\n'
                         f'* - —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ /FAQ\n'
                         f'–£ –≤–∞—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {BotDB.get_user_referals(message.from_user.id)[1]}')


@dp.message_handler(Text(equals='üéÅ'))
@last_tap('bonus')
async def bonus(message: Message):
    await message.answer('|---in process---|')
    


# def company_info(id_user):
#     text = ""
#     field_company_user = get(key='field', where='id_user', meaning=id_user)
#     type_company = get(table=field_company_user, key='type', where='id_founder', meaning=id_user)
#     name_company = get(table=field_company_user, key='name_company', where='id_founder', meaning=id_user)
#     income = get(table=field_company_user, key='income', where='id_founder', meaning=id_user)
#     if type_company == "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û":
#         users = get(table=field_company_user, key='users', where='id_founder', meaning=id_user)
#         apps = get(table=field_company_user, key='apps', where='id_founder', meaning=id_user)
#         dataC = get(table=field_company_user, key='dataC', where='id_founder', meaning=id_user)
#         staff = get(table=field_company_user, key='count_junior', where='id_founder', meaning=id_user) + \
#                 get(table=field_company_user, key='count_middle', where='id_founder', meaning=id_user) + \
#                 get(table=field_company_user, key='count_senior', where='id_founder', meaning=id_user)

#         w = get(table=field_company_user, key='workplace', where='id_founder', meaning=id_user)
#         workplace = get(table='value_it', key='matter_text', where='name', meaning=w)

#         c = get(table=field_company_user, key='comp', where='id_founder', meaning=id_user)
#         comp = get(table='value_it', key='matter_text', where='name', meaning=c)

#         text = f'<i>–¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏:</i> {type_company}\n' \
#                f'<i>–ù–∞–∑–≤–∞–Ω–∏–µ:</i> {name_company}\n\n' \
#                f'<i>–ü–æ–º–µ—â–µ–Ω–∏–µ:</i> {workplace}\n' \
#                f'<i>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</i> {comp}\n\n' \
#                f'<i>–î–æ—Ö–æ–¥:</i> {shell_money(income)} —Ä—É–±./–º–∏–Ω.\n\n' \
#                f'–ö–æ–ª-–≤–æ‚û°Ô∏è\n' \
#                f'‚îú<i>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> {shell_money(users)}\n' \
#                f'‚îú<i>–≤—ã–ø—É—â–µ–Ω–Ω–æ–≥–æ –ü–û:</i> {shell_money(apps)}\n' \
#                f'‚îú<i>data-centre:</i> {shell_money(dataC)}\n' \
#                f'‚îî<i>—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</i> {shell_money(staff)}\n'
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     return text


# def company_keyboard(id_user):
#     field_company_user = get(key='field', where='id_user', meaning=id_user)
#     type_company = get(table=field_company_user, key='type', where='id_founder', meaning=id_user)
#     keyboard = 0
#     if type_company == "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û":
#         keyboard = company_it_main_menu
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     elif type_company == '':
#         pass
#     return keyboard


# @dp.message_handler(Text(equals="–ö–æ–º–ø–∞–Ω–∏—è¬ÆÔ∏è"))
# async def company(message: Message):
#     last_tap(message.from_user.id, 'company')
#     await message.answer(company_info(message.from_user.id), reply_markup=company_keyboard(message.from_user.id))
#     await company_dev_software.Q1.set()


# @dp.message_handler(state=company_dev_software.Q1)
# async def company_q1(message: Message, state: FSMContext):
#     text = message.text
#     field_company_user = get(key='field', where='id_user', meaning=message.from_user.id)
#     type_company = get(table=field_company_user, key='type', where='id_founder', meaning=message.from_user.id)
#     if text == '–ù–∞–∑–∞–¥‚§¥Ô∏è':
#         await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_page)
#         await state.finish()
#     elif text == "–ò–Ω—Ñ–æ –æ –∫–æ–º–ø–∞–Ω–∏–∏":
#         await message.answer(company_info(message.from_user.id), reply_markup=company_keyboard(message.from_user.id))
#     # IT
#     if type_company == '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û':
#         if text == "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ":
#             pass
#         elif text == "–ù–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞(-–æ–≤)":
#             countJunior = get(table='it_company', key='count_junior', where='id_founder', meaning=message.from_user.id)
#             requirements = get(table='value_it', key='matter_text', where='name', meaning='pJunior')
#             rText = get(table='value_it', key='matter_text', where='name', meaning=requirements)
#             pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pJunior') * \
#                       get(table='it_company', key='PofP', where='id_founder', meaning=message.from_user.id) / 100
#             expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pJunior')
#             await message.answer(f'<b>Junior</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n'
#                                  f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n'
#                                  f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n'
#                                  f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n'
#                                  f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countJunior)} —á–µ–ª.', reply_markup=programmists_j)
#         elif text == "–û—Ç–∫—Ä—ã—Ç—å data-centre":
#             pass
#         elif text == "–£–ª—É—á—à–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ":
#             pass
#         elif text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ü–û":
#             pass
#     if type_company == '–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
#     if type_company == '–§–µ—Ä–º–µ—Ä—Å—Ç–≤–æ':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     # –û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥
#     if type_company == '–†–µ—Å—Ç–æ—Ä–∞–Ω':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–°.–¢.–û':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–ê–¥–≤–æ–∫–∞—Ç—Å–∫–æ–µ –∞–≥–µ–Ω—Å—Ç–≤–æ':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–ß–∞—Å—Ç–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     # –ù–µ—Ñ—Ç—è–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–æ—Å—Ç—å
#     if type_company == '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     if type_company == '–î–æ–±—ã—á–∞ –Ω–µ—Ñ—Ç–∏':
#         if text == '':
#             pass
#         elif text == '':
#             pass
#     else:
#         pass


# @dp.callback_query_handler(state=company_dev_software.Q1)
# async def prog(call: CallbackQuery):
#     w = get(table='it_company', key='workplace', where='id_founder', meaning=call.from_user.id)
#     workplace = get(table='value_it', key='matter_int2', where='name', meaning=w)
#     if call.data == 'jun':
#         await call.answer(cache_time=0.1)
#         countJunior = get(table='it_company', key='count_junior', where='id_founder', meaning=call.from_user.id)
#         requirements = get(table='value_it', key='matter_text', where='name', meaning='pJunior')
#         rText = get(table='value_it', key='matter_text', where='name', meaning=requirements)
#         pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pJunior') * \
#                   get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#         expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pJunior')
#         text = f'<b>Junior</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countJunior)} —á–µ–ª.'
#         try:
#             await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id, text=text,
#                                         reply_markup=programmists_j)
#         except Exception as e:
#             pass
#     elif call.data == 'mid':
#         await call.answer(cache_time=0.1)
#         countMiddle = get(table='it_company', key='count_middle', where='id_founder', meaning=call.from_user.id)
#         requirements = get(table='value_it', key='matter_text', where='name', meaning='pMiddle')
#         rS = requirements.split(',')
#         rText = get(table='value_it', key='matter_text', where='name', meaning=rS[0]) + ', ' + get(table='value_it',
#                                                                                                   key='matter_text',
#                                                                                                   where='name',
#                                                                                                   meaning=rS[1])
#         pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pMiddle') * \
#                   get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#         expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pMiddle')
#         text = f'<b>Middle</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countMiddle)} —á–µ–ª.'
#         try:
#             await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id, text=text,
#                                         reply_markup=programmists_m)
#         except Exception as e:
#             pass
#     elif call.data == 'sir':
#         await call.answer(cache_time=0.1)
#         countSenior = get(table='it_company', key='count_senior', where='id_founder', meaning=call.from_user.id)
#         requirements = get(table='value_it', key='matter_text', where='name', meaning='pSenior')
#         rS = requirements.split(',')
#         rText = get(table='value_it', key='matter_text', where='name', meaning=rS[0]) + ', ' + get(table='value_it',
#                                                                                                   key='matter_text',
#                                                                                                   where='name',
#                                                                                                   meaning=rS[1])
#         pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pSenior') * \
#                   get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#         expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pSenior')
#         text = f'<b>Senior</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countSenior)} —á–µ–ª.'
#         try:
#             await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id, text=text,
#                                         reply_markup=programmists_s)
#         except Exception as e:
#             pass
#     elif call.data == 'junior':
#         comp = get(table="it_company", key='comp', where='id_founder', meaning=call.from_user.id)
#         eqr = get(table='value_it', key='matter_text', where='name', meaning='pJunior')
#         if comp.split('_')[2] >= eqr.split('_')[2]:
#             staff = get(table="it_company", key='count_junior', where='id_founder', meaning=call.from_user.id) + \
#                     get(table="it_company", key='count_middle', where='id_founder', meaning=call.from_user.id) + \
#                     get(table="it_company", key='count_senior', where='id_founder', meaning=call.from_user.id)
#             rub = get(key='rub', where='id_user', meaning=call.from_user.id)
#             if staff + 1 <= workplace:
#                 time_ = time.strftime('%X').split()[0]
#                 time_work_min = 60 - int(time_.split(':')[1])
#                 time_work_sec = 60 - int(time_.split(':')[2])
#                 time_money = time_work_min * get(table='value_it', key='matter_int1', where='name', meaning='pJunior')
#                 if rub - time_money > 0:

#                     payment = rub - time_money
#                     updateN(key='rub', where='id_user', meaning=call.from_user.id, num=round(payment, 2))

#                     pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pJunior') * \
#                               get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#                     add(table='it_company', key='income', where='id_founder', meaning=call.from_user.id,
#                         num=round(pIncome, 2))

#                     add(table='it_company', key='count_junior', where='id_founder', meaning=call.from_user.id,
#                         num=1)
#                     text = f'–ü–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∑–∞ {shell_money(time_work_min)}–º–∏–Ω. ' \
#                            f'{shell_money(time_work_sec)}—Å–µ–∫. = {shell_money(time_money)}—Ä—É–±. —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, ' \
#                            f'–ø–æ—Å–ª–µ –æ–Ω–∞ –±—É–¥–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è ' \
#                            f'—Ä–æ–≤–Ω–æ –∫–∞–∂–¥—ã–π —á–∞—Å‚ùóÔ∏è'
#                     try:
#                         await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
#                                                     text=text,
#                                                     reply_markup=okJ)
#                     except Exception as e:
#                         pass
#                 else:
#                     await call.answer('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', show_alert=True)
#             else:
#                 await call.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Å—Ç {staff}/{workplace} –∑–∞–Ω—è—Ç—ã!', show_alert=True)
#         else:
#             await call.answer(f'–£ –≤–∞—Å –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–æ–±–æ—Ç—á–∏–∫–∞!', show_alert=True)
#     elif call.data == 'middle':
#         comp = get(table="it_company", key='comp', where='id_founder', meaning=call.from_user.id)
#         wp = get(table="it_company", key='workplace', where='id_founder', meaning=call.from_user.id)
#         eqr = get(table='value_it', key='matter_text', where='name', meaning='pMiddle')
#         eqrW = eqr.split(',')[0]
#         eqrC = eqr.split(',')[1]
#         if comp.split('_')[2] >= eqrC.split('_')[2] and wp.split('_')[2] >= eqrW.split('_')[2]:
#             staff = get(table="it_company", key='count_junior', where='id_founder', meaning=call.from_user.id) + \
#                     get(table="it_company", key='count_middle', where='id_founder', meaning=call.from_user.id) + \
#                     get(table="it_company", key='count_senior', where='id_founder', meaning=call.from_user.id)
#             rub = get(key='rub', where='id_user', meaning=call.from_user.id)
#             if staff + 1 <= workplace:
#                 time_ = time.strftime('%X').split()[0]
#                 time_work_min = 60 - int(time_.split(':')[1])
#                 time_work_sec = 60 - int(time_.split(':')[2])
#                 time_money = time_work_min * get(table='value_it', key='matter_int1', where='name', meaning='pMiddle')
#                 if rub - time_money > 0:

#                     payment = rub - time_money
#                     updateN(key='rub', where='id_user', meaning=call.from_user.id, num=round(payment, 2))

#                     pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pMiddle') * \
#                               get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#                     add(table='it_company', key='income', where='id_founder', meaning=call.from_user.id,
#                         num=round(pIncome, 2))

#                     add(table='it_company', key='count_middle', where='id_founder', meaning=call.from_user.id,
#                         num=1)
#                     text = f'–ü–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∑–∞ {shell_money(time_work_min)}–º–∏–Ω. ' \
#                            f'{shell_money(time_work_sec)}—Å–µ–∫. = {shell_money(time_money)}—Ä—É–±. —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, ' \
#                            f'–ø–æ—Å–ª–µ –æ–Ω–∞ –±—É–¥–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è ' \
#                            f'—Ä–æ–≤–Ω–æ –∫–∞–∂–¥—ã–π —á–∞—Å‚ùóÔ∏è'
#                     try:
#                         await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
#                                                     text=text,
#                                                     reply_markup=okM)
#                     except Exception as e:
#                         pass
#                 else:
#                     await call.answer('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', show_alert=True)
#             else:
#                 await call.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Å—Ç {staff}/{workplace} –∑–∞–Ω—è—Ç—ã!', show_alert=True)
#         else:
#             await call.answer(f'–£ –≤–∞—Å –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–æ–±–æ—Ç—á–∏–∫–∞!', show_alert=True)
#     elif call.data == 'senior':
#         comp = get(table="it_company", key='comp', where='id_founder', meaning=call.from_user.id)
#         wp = get(table="it_company", key='workplace', where='id_founder', meaning=call.from_user.id)
#         eqr = get(table='value_it', key='matter_text', where='name', meaning='pSenior')
#         eqrW = eqr.split(',')[0]
#         eqrC = eqr.split(',')[1]
#         if comp.split('_')[2] >= eqrC.split('_')[2] and wp.split('_')[2] >= eqrW.split('_')[2]:
#             staff = get(table="it_company", key='count_junior', where='id_founder', meaning=call.from_user.id) + \
#                     get(table="it_company", key='count_middle', where='id_founder', meaning=call.from_user.id) + \
#                     get(table="it_company", key='count_senior', where='id_founder', meaning=call.from_user.id)
#             rub = get(key='rub', where='id_user', meaning=call.from_user.id)
#             if staff + 1 <= workplace:
#                 time_ = time.strftime('%X').split()[0]
#                 time_work_min = 60 - int(time_.split(':')[1])
#                 time_work_sec = 60 - int(time_.split(':')[2])
#                 time_money = time_work_min * get(table='value_it', key='matter_int1', where='name', meaning='pSenior')
#                 if rub - time_money > 0:

#                     payment = rub - time_money
#                     updateN(key='rub', where='id_user', meaning=call.from_user.id, num=round(payment, 2))

#                     pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pSenior') * \
#                               get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#                     add(table='it_company', key='income', where='id_founder', meaning=call.from_user.id,
#                         num=round(pIncome, 2))

#                     add(table='it_company', key='count_senior', where='id_founder', meaning=call.from_user.id,
#                         num=1)
#                     text = f'–ü–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∑–∞ {shell_money(time_work_min)}–º–∏–Ω. ' \
#                            f'{shell_money(time_work_sec)}—Å–µ–∫. = {shell_money(time_money)}—Ä—É–±. —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, ' \
#                            f'–ø–æ—Å–ª–µ –æ–Ω–∞ –±—É–¥–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è ' \
#                            f'—Ä–æ–≤–Ω–æ –∫–∞–∂–¥—ã–π —á–∞—Å‚ùóÔ∏è'
#                     try:
#                         await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
#                                                     text=text,
#                                                     reply_markup=okS)
#                     except Exception as e:
#                         pass
#                 else:
#                     await call.answer('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', show_alert=True)
#             else:
#                 await call.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Å—Ç {staff}/{workplace} –∑–∞–Ω—è—Ç—ã!', show_alert=True)
#         else:
#             await call.answer(f'–£ –≤–∞—Å –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–æ–±–æ—Ç—á–∏–∫–∞!', show_alert=True)
#     elif call.data == 'okay_j':
#         await call.answer(cache_time=0.1)
#         countJunior = get(table='it_company', key='count_junior', where='id_founder', meaning=call.from_user.id)
#         requirements = get(table='value_it', key='matter_text', where='name', meaning='pJunior')
#         rText = get(table='value_it', key='matter_text', where='name', meaning=requirements)
#         pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pJunior') * \
#                   get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#         expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pJunior')
#         text = f'<b>Junior</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countJunior)} —á–µ–ª.'
#         try:
#             await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id, text=text,
#                                         reply_markup=programmists_j)
#         except Exception as e:
#             pass
#     elif call.data == 'okay_m':
#         await call.answer(cache_time=0.1)
#         countJunior = get(table='it_company', key='count_middle', where='id_founder', meaning=call.from_user.id)
#         eqr = get(table='value_it', key='matter_text', where='name', meaning='pMiddle')
#         eqrW = eqr.split(',')[0]
#         eqrC = eqr.split(',')[1]
#         rText = get(table='value_it', key='matter_text', where='name', meaning=eqrW) + ', ' + \
#                 get(table='value_it', key='matter_text', where='name', meaning=eqrC)
#         pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pMiddle') * \
#                   get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#         expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pMiddle')
#         text = f'<b>Middle</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countJunior)} —á–µ–ª.'
#         try:
#             await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id, text=text,
#                                         reply_markup=programmists_m)
#         except Exception as e:
#             pass
#     elif call.data == 'okay_s':
#         await call.answer(cache_time=0.1)
#         countJunior = get(table='it_company', key='count_senior', where='id_founder', meaning=call.from_user.id)
#         eqr = get(table='value_it', key='matter_text', where='name', meaning='pSenior')
#         eqrW = eqr.split(',')[0]
#         eqrC = eqr.split(',')[1]
#         rText = get(table='value_it', key='matter_text', where='name', meaning=eqrW) + ', ' + \
#                 get(table='value_it', key='matter_text', where='name', meaning=eqrC)
#         pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pSenior') * \
#                   get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#         expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pSenior')
#         text = f'<b>Senior</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countJunior)} —á–µ–ª.'
#         try:
#             await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id, text=text,
#                                         reply_markup=programmists_s)
#         except Exception as e:
#             pass
#     elif call.data == 'dismiss_junior':
#         cP = get(table="it_company", key='count_junior', where='id_founder', meaning=call.from_user.id)
#         if cP - 1 >= 0:
#             await call.answer(cache_time=0.1)
#             add(table='it_company', key='count_junior', where='id_founder', meaning=call.from_user.id, num=-1)

#             countP = get(table='it_company', key='count_junior', where='id_founder', meaning=call.from_user.id)
#             requirements = get(table='value_it', key='matter_text', where='name', meaning='pJunior')
#             rText = get(table='value_it', key='matter_text', where='name', meaning=requirements)
#             pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pJunior') * \
#                       get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#             add(table='it_company', key='income', where='id_founder', meaning=call.from_user.id,
#                 num=-1 * round(pIncome, 2))
#             expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pJunior')
#             text = f'<b>Junior</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                    f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                    f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                    f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                    f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countP)} —á–µ–ª.'
#             try:
#                 await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
#                                             text=text,
#                                             reply_markup=programmists_j)
#             except Exception as e:
#                 pass
#         else:
#             await call.answer(f'–í–∞–º –Ω√©–∫–æ–≥–æ —É–≤–æ–ª—å–Ω—è—Ç—å üòÖ', show_alert=True)
#     elif call.data == 'dismiss_middle':
#         cP = get(table="it_company", key='count_middle', where='id_founder', meaning=call.from_user.id)
#         if cP - 1 >= 0:
#             await call.answer(cache_time=0.1)
#             add(table='it_company', key='count_middle', where='id_founder', meaning=call.from_user.id, num=-1)

#             countP = get(table='it_company', key='count_middle', where='id_founder', meaning=call.from_user.id)
#             eqr = get(table='value_it', key='matter_text', where='name', meaning='pMiddle')
#             eqrW = eqr.split(',')[0]
#             eqrC = eqr.split(',')[1]
#             rText = get(table='value_it', key='matter_text', where='name', meaning=eqrW) + ', ' + \
#                 get(table='value_it', key='matter_text', where='name', meaning=eqrC)
#             pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pMiddle') * \
#                       get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#             add(table='it_company', key='income', where='id_founder', meaning=call.from_user.id,
#                 num=-1 * round(pIncome, 2))
#             expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pMiddle')
#             text = f'<b>Middle</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                    f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                    f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                    f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                    f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countP)} —á–µ–ª.'
#             try:
#                 await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
#                                             text=text,
#                                             reply_markup=programmists_m)
#             except Exception as e:
#                 pass
#         else:
#             await call.answer(f'–í–∞–º –Ω√©–∫–æ–≥–æ —É–≤–æ–ª—å–Ω—è—Ç—å üòÖ', show_alert=True)
#     elif call.data == 'dismiss_senior':
#         cP = get(table="it_company", key='count_senior', where='id_founder', meaning=call.from_user.id)
#         if cP - 1 >= 0:
#             await call.answer(cache_time=0.1)
#             add(table='it_company', key='count_senior', where='id_founder', meaning=call.from_user.id, num=-1)

#             countP = get(table='it_company', key='count_senior', where='id_founder', meaning=call.from_user.id)
#             eqr = get(table='value_it', key='matter_text', where='name', meaning='pSenior')
#             eqrW = eqr.split(',')[0]
#             eqrC = eqr.split(',')[1]
#             rText = get(table='value_it', key='matter_text', where='name', meaning=eqrW) + ', ' + \
#                 get(table='value_it', key='matter_text', where='name', meaning=eqrC)
#             pIncome = get(table='value_it', key='matter_int1', where='name', meaning='pSenior') * \
#                       get(table='it_company', key='PofP', where='id_founder', meaning=call.from_user.id) / 100
#             add(table='it_company', key='income', where='id_founder', meaning=call.from_user.id,
#                 num=-1 * round(pIncome, 2))
#             expenditure = get(table='value_it', key='matter_int2', where='name', meaning='pSenior')
#             text = f'<b>Senior</b> –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç\n\n' \
#                    f'<i>–ü—Ä–∏–±—ã–ª—å</i>: {shell_money(pIncome)} —Ä—É–±./–º–∏–Ω\n' \
#                    f'<i>–ó–∞—Ä–ø–ª–∞—Ç–∞</i>: {shell_money(expenditure)} —Ä—É–±./—á–∞—Å\n' \
#                    f'<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>: {rText}\n\n' \
#                    f'–£ —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç: {shell_money(countP)} —á–µ–ª.'
#             try:
#                 await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
#                                             text=text,
#                                             reply_markup=programmists_s)
#             except Exception as e:
#                 pass
#         else:
#             await call.answer(f'–í–∞–º –Ω√©–∫–æ–≥–æ —É–≤–æ–ª—å–Ω—è—Ç—å üòÖ', show_alert=True)
#     else:
#         print(call.data)


@dp.message_handler(content_types=['text'])
async def any_text(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard_default.main_page)